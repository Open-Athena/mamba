name: "Test pip install"
on:
  workflow_dispatch:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
        default: "2.2.5"
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
  workflow_call:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
permissions:
  id-token: write
  contents: read
jobs:
  ec2:
    uses: Open-Athena/ec2-gha/.github/workflows/runner.yml@v2
    secrets: inherit
    with:
      ec2_root_device_size: ${{ inputs.ebs_gb }}
      instance_name: "$repo/$name==${{ inputs.mamba_version }} (#$run_number)"
  install:
    name: Test mamba_ssm==${{ inputs.mamba_version }}
    needs: ec2
    runs-on: ${{ needs.ec2.outputs.id }}
    steps:
      - name: Setup Python environment
        run: |
          echo "Using system PyTorch 2.4.1 from AMI"
          # The AMI has PyTorch installed in the system Python
          echo "export PATH=/usr/bin:$PATH" >> $GITHUB_ENV

          # Install python3-venv if not available (needed on EC2 AMI)
          # Test by actually creating a venv, not just checking --help
          if ! python3 -m venv /tmp/test-venv 2>/dev/null; then
            echo "Installing python3-venv package"
            sudo apt-get update && sudo apt-get install -y python3-venv
          fi
          rm -rf /tmp/test-venv
      - name: Create environment for mamba_ssm==${{ inputs.mamba_version }}
        run: |
          # Use system Python with pre-installed PyTorch 2.4.1
          echo "Using AMI's PyTorch 2.4.1 with CUDA 12.4"
          # Check Python version on the AMI
          python3 --version
          # Create a virtual env that inherits system packages
          python3 -m venv --system-site-packages /tmp/mamba-${{ inputs.mamba_version }}
          source /tmp/mamba-${{ inputs.mamba_version }}/bin/activate
          echo "VIRTUAL_ENV=/tmp/mamba-${{ inputs.mamba_version }}" >> $GITHUB_ENV
          echo "/tmp/mamba-${{ inputs.mamba_version }}/bin" >> $GITHUB_PATH
      - name: Debug pip and platform info
        run: |
          source /tmp/mamba-${{ inputs.mamba_version }}/bin/activate
          echo "=== Python and pip versions ==="
          python --version
          pip --version
          echo -e "\n=== PyTorch version and CUDA ==="
          python -c "import torch; print(f'PyTorch: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA version for PyTorch: {torch.version.cuda}')"
          python -c "import torch; print(f'CXX11 ABI: {torch._C._GLIBCXX_USE_CXX11_ABI}')"
          echo -e "\n=== Platform info ==="
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"
          python -c "import platform; print(f'Processor: {platform.processor()}')"
          echo -e "\n=== glibc version ==="
          ldd --version | head -n1
          echo -e "\n=== CUDA info ==="
          nvcc --version || echo "nvcc not found"
          ls -la /usr/local/cuda* 2>/dev/null || echo "No CUDA installations found in /usr/local/"
      - name: Install and test mamba_ssm==${{ inputs.mamba_version }}
        run: |
          source /tmp/mamba-${{ inputs.mamba_version }}/bin/activate
          time pip install -v mamba_ssm==${{ inputs.mamba_version }}
      - name: Verify mamba_ssm installation
        run: |
          source /tmp/mamba-${{ inputs.mamba_version }}/bin/activate
          python -c 'import mamba_ssm; print(f"mamba_ssm {mamba_ssm.__version__} installed successfully")'
