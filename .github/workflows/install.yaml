name: "Test pip install"
on:
  workflow_dispatch:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
        default: "2.2.5"
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
  workflow_call:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
permissions:
  id-token: write
  contents: read
jobs:
  ec2:
    uses: Open-Athena/ec2-gha/.github/workflows/runner.yml@v2
    secrets: inherit
    with:
      ec2_root_device_size: ${{ inputs.ebs_gb }}
      instance_name: "$repo/$name==${{ inputs.mamba_version }} (#$run_number)"
  install:
    name: Test mamba_ssm==${{ inputs.mamba_version }}
    needs: ec2
    runs-on: ${{ needs.ec2.outputs.id }}
    steps:
      - name: Setup Python environment
        run: |
          echo "Using PyTorch 2.4.1 from AMI's conda pytorch environment"
          # The AMI has PyTorch in /opt/conda/envs/pytorch with Python 3.11
          source /opt/conda/bin/activate pytorch
          which python
          python --version
          python -c "import torch; print(f'PyTorch: {torch.__version__}, CUDA: {torch.version.cuda}')"

          # Set up environment for GitHub Actions to use conda env
          echo "/opt/conda/envs/pytorch/bin" >> $GITHUB_PATH
          echo "CONDA_DEFAULT_ENV=pytorch" >> $GITHUB_ENV
      - name: Debug pip and platform info
        run: |
          echo "=== Python and pip versions ==="
          python --version
          pip --version
          echo -e "\n=== PyTorch version and CUDA ==="
          python -c "import torch; print(f'PyTorch: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import torch; print(f'CUDA version for PyTorch: {torch.version.cuda}')"
          python -c "import torch; print(f'CXX11 ABI: {torch._C._GLIBCXX_USE_CXX11_ABI}')"
          echo -e "\n=== Platform info ==="
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"
          python -c "import platform; print(f'Processor: {platform.processor()}')"
          echo -e "\n=== glibc version ==="
          ldd --version | head -n1
          echo -e "\n=== CUDA info ==="
          nvcc --version || echo "nvcc not found"
          ls -la /usr/local/cuda* 2>/dev/null || echo "No CUDA installations found in /usr/local/"
      - name: Install and test mamba_ssm==${{ inputs.mamba_version }}
        run: |
          # Install mamba_ssm without build isolation to use existing torch from conda env
          # No need to reinstall torch since it's already in the conda environment
          time pip install -v --no-build-isolation mamba_ssm==${{ inputs.mamba_version }}
      - name: Verify mamba_ssm installation
        run: |
          python -c 'import mamba_ssm; print(f"mamba_ssm {mamba_ssm.__version__} installed successfully")'
