name: "Test pip install"
on:
  workflow_dispatch:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
        default: "2.2.5"
      torch_version:
        description: "PyTorch version to use"
        required: false
        type: string
        default: "2.7"
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
  workflow_call:
    inputs:
      mamba_version:
        description: "Mamba version to test"
        required: true
        type: string
      torch_version:
        description: "PyTorch version to use"
        required: false
        type: string
        default: "2.4"
      python:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11.13"
      ebs_gb:
        description: "EBS volume size in GB (default: 60)"
        required: false
        type: string
        default: "80"
permissions:
  id-token: write
  contents: read
jobs:
  ec2:
    uses: Open-Athena/ec2-gha/.github/workflows/runner.yml@v2
    secrets: inherit
    with:
      ec2_root_device_size: ${{ inputs.ebs_gb }}
  install:
    name: Test mamba_ssm==${{ inputs.mamba_version }}
    needs: ec2
    runs-on: ${{ needs.ec2.outputs.id }}
    steps:
      - name: Setup conda
        run: |
          echo "export PATH=/opt/conda/bin:$PATH" >> $GITHUB_ENV
          /opt/conda/bin/conda init bash
      - name: Create conda environment for mamba_ssm==${{ inputs.mamba_version }}
        run: |
          export PATH=/opt/conda/bin:$PATH
          # Pin PyTorch to specific version for prebuilt wheel compatibility
          # Without this, conda installs PyTorch 2.8 which causes mamba-ssm to build from source (50+ minutes)
          conda create -n mamba-${{ inputs.mamba_version }} python=${{ inputs.python }} pytorch=${{ inputs.torch_version }}.* pytorch-cuda=12.4 -c pytorch -c nvidia -y
      - name: Debug pip and platform info
        run: |
          export PATH=/opt/conda/bin:$PATH
          source /opt/conda/bin/activate mamba-${{ inputs.mamba_version }}
          echo "=== Python and pip versions ==="
          python --version
          pip --version
          echo -e "\n=== Platform info ==="
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"
          python -c "import platform; print(f'Processor: {platform.processor()}')"
          echo -e "\n=== glibc version ==="
          ldd --version | head -n1
          echo -e "\n=== pip debug info ==="
          python -m pip debug --verbose
          echo -e "\n=== CUDA info ==="
          nvcc --version || echo "nvcc not found"
          ls -la /usr/local/cuda* 2>/dev/null || echo "No CUDA installations found in /usr/local/"
      - name: Install and test mamba_ssm==${{ inputs.mamba_version }}
        run: |
          export PATH=/opt/conda/bin:$PATH
          source /opt/conda/bin/activate mamba-${{ inputs.mamba_version }}
          echo "Starting pip install with verbose output..."
          echo "Checking for prebuilt wheels..."
          pip index versions mamba-ssm || true
          echo "Installing mamba_ssm..."
          time pip install -v mamba_ssm==${{ inputs.mamba_version }}
      - name: Verify mamba_ssm installation
        run: |
          echo "Installation complete. Checking package..."
          python -c 'import mamba_ssm; print(f"mamba_ssm {mamba_ssm.__version__} installed successfully")'
